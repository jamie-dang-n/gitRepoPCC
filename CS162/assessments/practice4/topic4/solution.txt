// Task 1: getLowerCostItems()

// function
int ItemList::getOlderItems(const Date& expDate, InventoryItem *& olderItems) const {
	Node * curr = head;
	int numItems = 0;
	int i = 0;

	// Finding size of array
	while (curr) {
		if (*(curr->data.getExpDate()) < expDate) {
			numItems++;
		}
		curr = curr->next;
	}

	// Allocating the array
	olderItems = new InventoryItem[numItems];

	// adding items to the dynamic array
	curr = head; // reset curr pointer
	while (curr) {
		if (*(curr->data.getExpDate()) < expDate) {
			olderItems[i] = curr->data;
			i++;
		}
		curr = curr->next;
	}	

	return numItems;
}

// helper function for test code
void getDate(int& year, int& month, int& day) {
	cout << "Enter the expiration date to find items: ";
	cin >> year;
	cin.get(); // remove the /
	cin >> month;
	cin.get(); // remove the /
	cin >> day;
	cout << endl; // blank line
	
	while ((year < 0 || month < 0 || (day < 0 || day > 31)) || !cin || cin.peek() != '\n') {
		cout << "Error: Please enter a valid date. It should be in year/month/day format." << endl;
		cout << endl;
		cin.clear();
		cin.ignore(numeric_limits<streamsize>::max(), '\n');	
		cout << "Enter the expiration date to find items: ";
		cin >> year;
		cin.get(); // remove the /
		cin >> month;
		cin.get(); // remove the /
		cin >> day;
		cout << endl; // blank line
	}
}

// test code
	// Task 1: getOlderItems()
	int userYear, userMonth, userDay;
	int numOlder;
	InventoryItem * olderItems;

	// Date user input
	getDate(userYear, userMonth, userDay);
	
	// Set up Date object from user
	Date userDate(userYear, userMonth, userDay);

	// Call getOlderItems()
	numOlder = inventory.getOlderItems(userDate, olderItems);
	if (numOlder != 0) {
		cout << "Yes! There are old items in your list." << endl; 
		cout << endl; // blank line
		for (int i = 0; i < numOlder; i++) {
			olderItems[i].print();
		}
		cout << endl; // blank line
	} else {
		cout << "There are no items older than that date in your list." << endl;	
		cout << endl; // blank line
	}

	// Deallocating the array
	delete[] olderItems;

// Task 2: removeFirstAndLast()

// function
void ItemList::removeFirstAndLast() {
	Node * curr = head;
	Node * prev = nullptr;
	if (!(size < 2)) {
		// size isn't less than 2, so remove first and last
		head = curr->next;
		delete curr;

		// find the end of the list
		curr = head; // reset curr to new head
	   	while (curr->next != nullptr) {
			prev = curr;
			curr = curr->next;
		}	

		// Once found, break out of loop
		// deleting end node
		delete curr;
		prev->next = nullptr;
	}
}

// test code
	// Task 2: Removing first and last nodes
	cout << "Removing first and last nodes." << endl;
	inventory.removeFirstAndLast();
	cout << endl; // blank line
	
	cout << "Updated list below:" << endl;
	inventory.printList();
