1. How well did the data structure selected perform for the assigned application?
I feel like the data structure performed well for the assigned application! Implementing the features
wasn't very difficult, since we only had to deal with one point of access for both Queue and Stack. 
My only issue with the data structure was that I noticed my program took some time to compile. 
I felt like I did a good job with making sure everything only used as much data as it needed,
so I'm not sure why it took a while. I did break up my code into many modules so that it would be
easy to isolate and debug various parts of the program. Regardless, besides how slowly the program would
compile, I felt like when I was able to run the executable, the program ran well and did everything needed
for the assigned application.

2. Would a different data structure work better? If so, which one and why...
I can't think of a better data structure for the restaurant line. I felt like a circular linked list for the
Queue ADT implementation was a natural decision, given the nature of a line. A line by itself is already
structured like a queue, and a linked list operates similar to people standing in line. There's always a 
"next" person in line, and each person in line could be analogus to a node in a linked list. I am also
not sure what would work better than the stack we had created using a dynamic array. I could see it being
possible to use a linked list for the stack, where we only do operations on the head pointer. That way, we 
avoid the issue associated with arrays, wherein the array may take up more memory than is necesary. I had
to write an expand() function for the dynamic stack array, in case it got full. These arrays must always
have some defined size the moment they're written in code, which can be inflexible when it comes to 
varying amounts of data. 

3. What was efficient about your design and use of the data structure?
I felt like I did a good job ensuring that I didn't use more data than was necessary. As the client, I started
with making the stack very small, so that I could test the expand() function. The expand() function worked well, 
since I didn't notice any impact on performance as I increased the number of entries into the stack. Moreover, 
the growth factor of the expand function was not too large, so it wasn't a hassle to allocate new data in the heap. 
I also modularized everything, which gave me more control over how I would allocate memory for data such as character
arrays. I made sure to have all char arrays be allocated with char pointers, unless the array was to be used only locally.
In cases where I only needed a cstring temporarily/locally, I allocated it statically and let the function remove it
once the execution returned from the function. Otherwise, I made sure to keep character arrays only as long as I needed
them to be. All parts of the data structure were isolated which made programming fast-- I hope that the efficiency 
reflects in the program execution too. 

4. What was not efficient?
I felt like the executable ran very smoothly when I was testing adding, removing, and displaying data
for both the Stack and the Queue. However, the part that took the longest was compiling the program itself.
I think that this was due to the amount of classes I had. I broke everything down into modules. 
To start, I knew that the Queue would work with groups of people, so I made a separate class for the groups
of customers that would hold all of the data members needed for the assginment. This way, I could use char pointers
to assign a size that is "just right" for all text entries, and group together other related data members. Moreover,
I had a single place where I could make sure that I don't create memory leaks, by creating my own setters, getters,
and defining constructors/copy constructors/destructors/assignment overloads. I went about creating the Entry class
for the Stack ADT similarly. This way, I could isolate all of the functions of those two "containers" for my data,
and focus entirely on making sure the stack and queue manipulated nodes of data properly. This was great for my
programming experience, since everything was able to work independently of each other. However, this definitely
made compiling the code take some time, and I suspect that it is because the makefile had so many targets to handle.
I didn't notice the compilation taking so long until after I had already set up my clases.

5. What would you do differently if you had more time to solve the problem?
I think I would have been interested in trying to make more of the data saved via pointers. I felt like another part
of why my code might have taken a while to compile, is because I did a lot of work with objects rather than pointers.
Pointers are easy to move around because they only store addresses. However, they are also more finnicky because they 
don't store any meaningful data-- they just point to it. I noticed in Professor Liang's lectures that she used a pointer 
to store Student data in the roster program. In both the stack and the queue, I used actual Entry and Group objects, rather 
than a pointer to them. I would be curious to try changing those direct objects to pointers, in case it might improve performance. 
