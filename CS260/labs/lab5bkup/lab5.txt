// Recursively compute and return the number of nodes in the circular linked list.
int countR(node * head) {
	int num = 0;
	
	// unwrap the circular linked list into a singly linked list
	node * temp = head->next;
	head->next = nullptr;	

	// recurse with the helper function
	num = _countR(temp);

	// put the list back together
	head->next = temp;

	return num;
}

// helper function to count recursively
int _countR(node * head) {
	if (head) {
		// list is not empty -- recurse
		return _countR(head->next) + 1;	
	}
	// list is empty -- this is the base case
	return 0;
}




// Recursively compute and return the sum of the ints contained in the circular linked list.
int sumR(node * head) { 
	int sum = 0;

	// unwrap the circular linked list into a singly linked list
	node * temp = head->next;
	head->next = nullptr;	

	// recurse with the helper function
	sum = _sumR(temp);

	// put the list back together
	head->next = temp;

	return sum;
}

// helper function to sum recursively
int _sumR(node * head) {
	if (head) {
		// list is not empty -- recurse
		return _sumR(head->next) + head->data;	
	}
	// list is empty -- this is the base case
	return 0;
}




Program Output:

Here is the original list: 2 -> 55 -> 0 -> 5 -> 58 -> 50 -> 21 -> 76 -> 51 -> 21 -> 26 -> 34 -> 57 -> 25 -> 44 -> 2 -> 89 -> 40 -> 56 -> 57 -> 56 -> 71 -> 2

This list contains 23 number of items 
iterative count: 23
recursive count: 23
iterative sum: 898
recursive sum: 898


The resulting list is... 2 -> 55 -> 0 -> 5 -> 58 -> 50 -> 21 -> 76 -> 51 -> 21 -> 26 -> 34 -> 57 -> 25 -> 44 -> 2 -> 89 -> 40 -> 56 -> 57 -> 56 -> 71 -> 2

This list contains 23 number of items 
The sum of all data is: 898
# nodes freed: 23
